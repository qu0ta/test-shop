from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from Shop_bot.FSM import ChoicePay, AddItem
from Shop_bot.YM import get_balance_url, is_success
from Shop_bot.databases import create_tables, check_or_add_user, is_accept, accept_user, send_profile_data, \
    add_balance, count_rows, count_balance
from Shop_bot.keyboards import accept, menu, choice_money, admin_menu

'''
TASK: –¥–æ–¥–µ–ª–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
'''
# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü user –∏ items
create_tables()
token = ''
admin_id = 726883862
bot = Bot(token=token)
dp = Dispatcher(bot=bot, storage=MemoryStorage())


@dp.message_handler(commands='start')
async def welcome(message):
    user_id = message.from_user.id
    user = message.from_user.first_name
    username = message.from_user.username
    user_values = (user_id, user, username, 0, 0)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    check_or_add_user(*user_values)
    if is_accept(user_id):
        await bot.send_message(message.chat.id, f'–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞, {user.upper()}!', reply_markup=menu)
    else:
        await bot.send_message(message.chat.id, reply_markup=accept,
                               text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–£—á—Ç–∏—Ç–µ, —á—Ç–æ –º—ã –Ω–µ –Ω–µ—Å—ë–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å'
                                    '–∑–∞ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.')


@dp.message_handler(commands='info')
@dp.message_handler(lambda message: message.text == '‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def information(message):
    await bot.send_message(message.chat.id, '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ ‚Äî @stanisIaw.')


@dp.message_handler(commands='admin')
async def admin_channel(message):
    if message.from_user.id == admin_id:
        count = count_rows()
        all_balance = count_balance()
        await bot.send_message(message.chat.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {all_balance}",
                               reply_markup=admin_menu)


@dp.message_handler(lambda message: message.text == 'üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def new_item(message):
    if message.from_user.id == admin_id:
        await message.answer('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')
        # await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.')
        # await AddItem.name.set()


@dp.message_handler(lambda message: message.text == 'üß® –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def del_item(message):
    if message.from_user.id == admin_id:
        await message.answer('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.')


# @dp.message_handler(state=AddItem.name)
# async def set_name(message):
#     global name
#     name = message.text
#     await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
#     await AddItem.description.set()


# @dp.message_handler(state=AddItem.description)
# async def set_desc(message):
#     global description
#     description = message.text
#     await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')
#     await AddItem.price.set()


# @dp.message_handler(state=AddItem.price)
# async def set_price(message):
#     global price
#     try:
#         price = int(message.text)
#     except ValueError:
#         await bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ.')
#     else:
#         await bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫ —Ç–æ–≤–∞—Ä—É.')
#         await AddItem.additem.set()


@dp.message_handler(content_types=['document'], state=AddItem.additem)
async def add_item_file(message):
    pass
    # await bot.download_file(file_path, name)
    # url = get_file_url(name)
    # values = (name, description, price, url)
    # add_item(*values)
    # await bot.send_message(message.chat.id, '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    # await dp.current_state(user=message.from_user.id).reset_state()


@dp.message_handler(lambda message: message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message):
    user_id, user, balance = send_profile_data(message)[0]
    await bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user}!\n–í–∞—à –∞–π–¥–∏ ‚Äî {user_id}.\n'
                                            f'–í–∞—à –±–∞–ª–∞–Ω—Å ‚Äî {balance} —Ä—É–±–ª–µ–π.\n'
                                            f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º!')


@dp.message_handler(lambda message: message.text == 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
async def add_money(message):
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.', reply_markup=choice_money)


@dp.callback_query_handler(lambda call: call.data == 'deny')
async def deny_msg(call):
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await bot.send_message(call.message.chat.id, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n'
                                                 '–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.')


@dp.callback_query_handler(lambda call: call.data == 'accept')
async def accept_msg(call):
    user = call['from'].first_name
    accept_user(call['from'].id)
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await bot.send_message(call.message.chat.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user}!', reply_markup=menu)


@dp.callback_query_handler(lambda call: call.data == 'yookassa')
async def yoomoney(call):
    await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞".')
    await ChoicePay.amount.set()


@dp.callback_query_handler(lambda call: call.data == 'ym_check_pay')
async def check_pay(call):
    if is_success()[0] and is_success()[1] > 0:
        add_balance(call['from'].id, is_success()[1])
        await bot.delete_message(call.message.chat.id, message_id=call.message.message_id)
        await bot.send_message(call.message.chat.id, f'–ë–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É {is_success()[1]} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω.')
        await bot.send_message(726883862, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call["from"].username} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É '
                                          f'{is_success()[1]} —Ä—É–±–ª–µ–π')
    else:
        await bot.send_message(call.message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
        await dp.current_state(user=call.message.from_user.id).reset_state()


@dp.message_handler(state=ChoicePay.amount)
async def send_pay_url(message):
    try:
        money = int(message.text)
    except ValueError:
        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            await bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
            await dp.current_state(user=message.from_user.id).reset_state()
        else:
            await bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ')
            await dp.current_state(user=message.from_user.id).reset_state()
            await ChoicePay.amount.set()
    else:
        if money < 2:
            await bot.send_message(message.chat.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ 2 —Ä—É–±–ª—è.')
        else:
            pay = InlineKeyboardMarkup()
            pay.row(InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', url=get_balance_url(money)))
            pay.row(InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='ym_check_pay'))

            await bot.send_message(message.chat.id, "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=pay)
    await dp.current_state(user=message.from_user.id).reset_state()


print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
